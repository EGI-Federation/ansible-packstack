---
- hosts: packstack
  gather_facts: yes
  become: yes
  become_method: sudo
  tasks:
    - name: Set server hostname
      hostname:
        name: "{{ server_fqdn }}"

    - name: Install updates
      package:
        name: '*'
        state: latest
        update_cache: yes
      tags:
        - skip_ansible_lint

    - name: Disable firewalld service
      systemd:
        name: firewalld
        enabled: no
        state: stopped

    - name: Disable NetworkManager service
      systemd:
        name: NetworkManager
        enabled: no
        state: stopped

    - name: Enable network service
      systemd:
        name: network
        enabled: yes

    - name: Install NTP package
      yum:
        name: ntp
        state: installed

    - name: Enable NTP service
      systemd:
        name: ntpd
        enabled: yes
        state: started

    - name: Install OpenStack {{ os_release }} repository
      yum:
        name: centos-release-openstack-{{ os_release }}
        state: installed
      notify: install updates

    - name: Install packstack installer
      yum:
        name: openstack-packstack
        state: installed

    - name: Copy server certificate
      copy:
        src: '{{ item.src }}'
        dest: '{{ item.path }}'
        owner: root
        group: root
        mode: '{{ item.mode }}'
      no_log: true
      with_items:
        - src: '{{ ssl_cacert }}'
          path: /etc/pki/tls/certs/os_packstack_cacert.pem
          mode: '0644'
        - src: '{{ ssl_cert }}'
          path: /etc/pki/tls/certs/os_packstack_cert.pem
          mode: '0644'
        - src: '{{ ssl_key }}'
          path: /etc/pki/tls/private/os_packstack_key.pem
          mode: '0600'

    # XXX Should we use an answer file as a template?
    - name: Execute packstack installer
      command: >
        packstack --allinone
        --provision-demo=n
        --nagios-install=n
        --ssl-cacert-selfsign=n
        --os-horizon-ssl=y
        --os-ssl-cert=/etc/pki/tls/certs/os_packstack_cert.pem
        --os-ssl-key=/etc/pki/tls/private/os_packstack_key.pem
        --os-ssl-cachain=/etc/pki/tls/certs/os_packstack_cacert.pem
        --nova-ssl-cert=/etc/pki/tls/certs/os_packstack_cert.pem
        --nova-ssl-key=/etc/pki/tls/private/os_packstack_key.pem
      args:
        chdir: '/root'
        creates: '/root/keystonerc_admin'

    - name: Fix HTTP and HTTPS for Horizon
      block:
        - name: Fix HTTP VHost for Horizon
          replace:
            path: /etc/httpd/conf.d/15-horizon_vhost.conf
            regexp: '^(\s+RedirectMatch permanent.*https://).*$'
            replace: '\1{{ server_fqdn }}'
          notify:
            - restart apache
        - name: Fix HTTP to HTTPS redirection for Horizon
          replace:
            path: /etc/httpd/conf.d/15-horizon_vhost.conf
            regexp: '^(\s+ServerName ).*'
            replace: '\1{{ server_fqdn }}'
          notify:
            - restart apache
        - name: Fix HTTPS VHost for Horizon
          replace:
            path: /etc/httpd/conf.d/15-horizon_ssl_vhost.conf
            regexp: '^(\s+ServerName ).*'
            replace: '\1{{ server_fqdn }}'
          notify:
            - restart apache
        - name: Enable secure CSRF cookie for HTTPS in horizon settings
          lineinfile:
            dest: /etc/openstack-dashboard/local_settings
            regexp: '^CSRF_COOKIE_SECURE'
            insertafter: '^#CSRF_COOKIE_SECURE'
            line: 'CSRF_COOKIE_SECURE = True'
          notify:
            - restart apache
        - name: Enable secure session cookie for HTTPS in horizon settings
          lineinfile:
            dest: /etc/openstack-dashboard/local_settings
            regexp: '^SESSION_COOKIE_SECURE'
            insertafter: '^#SESSION_COOKIE_SECURE'
            line: 'SESSION_COOKIE_SECURE = True'
          notify:
            - restart apache

    - name: Update servername and configure HTTPS in Keystone VHosts
      block:
        - name: Update servername in Keystone admin VHost
          lineinfile:
            dest: /etc/httpd/conf.d/10-keystone_wsgi_admin.conf
            regexp: '^(\s+ServerName ).*'
            line: '\1{{ server_fqdn }}'
            backrefs: yes
          notify:
            - restart apache
        - name: Update servername in Keystone main VHost
          lineinfile:
            dest: /etc/httpd/conf.d/10-keystone_wsgi_main.conf
            regexp: '^(\s+ServerName ).*'
            line: '\1{{ server_fqdn }}'
            backrefs: yes
          notify:
            - restart apache
        - name: Configure HTTPS in Keystone admin VHost
          blockinfile:
            path: /etc/httpd/conf.d/10-keystone_wsgi_admin.conf
            insertafter: '.*DocumentRoot "/var/www/cgi-bin/keystone".*'
            block: |
              SSLEngine on
              SSLCertificateFile /etc/pki/tls/certs/os_packstack_cert.pem
              SSLCertificateKeyFile /etc/pki/tls/private/os_packstack_key.pem
              SSLCACertificateFile /etc/pki/tls/certs/os_packstack_cacert.pem
          notify:
            - restart apache
        - name: Configure HTTPS in Keystone main VHost
          blockinfile:
            path: /etc/httpd/conf.d/10-keystone_wsgi_main.conf
            insertafter: '.*DocumentRoot "/var/www/cgi-bin/keystone".*'
            block: |
              SSLEngine on
              SSLCertificateFile /etc/pki/tls/certs/os_packstack_cert.pem
              SSLCertificateKeyFile /etc/pki/tls/private/os_packstack_key.pem
              SSLCACertificateFile /etc/pki/tls/certs/os_packstack_cacert.pem
          notify:
            - restart apache

    - name: Enable HTTPS for Keystone
      ini_file:
        path: /etc/keystone/keystone.conf
        section: ssl
        option: enable
        value: True
        backup: yes
      notify:
        - restart apache

    - name: Enable HTTPS for Keystone for nova
      block:
        - name: Enable HTTPS for Keystone in nova.conf
          ini_file:
            path: /etc/nova/nova.conf
            section: keystone_authtoken
            option: auth_uri
            value: https://{{ server_fqdn }}:5000/
            backup: yes
          notify:
            - restart nova-compute
        - name: Enable HTTPS auth_url for keystone in nova.conf
          ini_file:
            path: /etc/nova/nova.conf
            section: keystone_authtoken
            option: auth_url
            value: https://{{ server_fqdn }}:35357
            backup: yes
          notify:
            - restart nova-compute

    - name: Enable HTTPS for Glance API
      block:
        - name: Enable HTTPS for Glance in glance-api.conf
          ini_file:
            path: /etc/glance/glance-api.conf
            section: keystone_authtoken
            option: auth_uri
            value: https://{{ server_fqdn }}:5000/v3
            backup: yes
          notify:
            - restart glance-api
        - name: Enable HTTPS auth_url for Glance in glance-api.conf
          ini_file:
            path: /etc/glance/glance-api.conf
            section: keystone_authtoken
            option: auth_url
            value: https://{{ server_fqdn }}:35357
            backup: yes
          notify:
            - restart glance-api

    - name: Enable HTTPS for Glance registry
      block:
        - name: Enable HTTPS for Glance in glance-registry.conf
          ini_file:
            path: /etc/glance/glance-registry.conf
            section: keystone_authtoken
            option: auth_uri
            value: https://{{ server_fqdn }}:5000/v3
            backup: yes
          notify:
            - restart glance-registry
        - name: Enable HTTPS auth_url for Glance in glance-registry.conf
          ini_file:
            path: /etc/glance/glance-registry.conf
            section: keystone_authtoken
            option: auth_url
            value: https://{{ server_fqdn }}:35357
            backup: yes
          notify:
            - restart glance-registry

    - name: Enable HTTPS for Neutron
      block:
        - name: Enable HTTPS for Neutron in neutron.conf
          ini_file:
            path: /etc/neutron/neutron.conf
            section: keystone_authtoken
            option: auth_uri
            value: https://{{ server_fqdn }}:5000/v3
            backup: yes
          notify:
            - restart neutron
        - name: Enable HTTPS auth_url for Neutron in neutron.conf
          ini_file:
            path: /etc/neutron/neutron.conf
            section: keystone_authtoken
            option: auth_url
            value: https://{{ server_fqdn }}:35357
            backup: yes
          notify:
            - restart neutron

    - name: Enable HTTPS for Keystone in horizon settings
      lineinfile:
        dest: /etc/openstack-dashboard/local_settings
        regexp: '^OPENSTACK_KEYSTONE_URL'
        line: 'OPENSTACK_KEYSTONE_URL = "https://{{ server_fqdn }}:5000/v3"'
      notify:
        - restart apache

    - name: Configure certificate for HTTPS for nova in nova.conf
      block:
        - name: Set ca_file for HTTPS for nova in nova.conf
          ini_file:
            path: /etc/nova/nova.conf
            section: ssl
            option: ca_file
            value: /etc/pki/tls/certs/os_packstack_cacert.pem
            backup: yes
          notify:
            - restart nova-compute
        - name: Set cert_file for HTTPS for nova in nova.conf
          ini_file:
            path: /etc/nova/nova.conf
            section: ssl
            option: cert_file
            value: /etc/pki/tls/certs/os_packstack_cert.pem
            backup: yes
          notify:
            - restart nova-compute
        - name: Set key_file for HTTPS for nova in nova.conf
          ini_file:
            path: /etc/nova/nova.conf
            section: ssl
            option: key_file
            value: /etc/pki/tls/private/os_packstack_key.pem
            backup: yes
          notify:
            - restart nova-compute

    - name: Fix endpoints in keystone database
      block:
        - name: Look for HTTPS 5000/v2.0 url
          shell: >
            mysql keystone -s -N
            -e 'select url from endpoint where url LIKE "http://%5000/v2.0"'
            | wc -l
          register: https_5000_v20
          changed_when: False
        - name: Look for HTTPS 35357/v2.0 url
          shell: >
            mysql keystone -s -N
            -e 'select url from endpoint where url LIKE "http://%35357/v2.0"'
            | wc -l
          register: https_35357_v20
          changed_when: False
        - name: Look for HTTPS 5000/v3 url
          shell: >
            mysql keystone -s -N
            -e 'select url from endpoint where url LIKE "http://%5000/v3"'
            | wc -l
          register: https_5000_v3
          changed_when: False
        - name: Look for HTTPS 35357/v3 url
          shell: >
            mysql keystone -s -N
            -e 'select url from endpoint where url LIKE "http://%35357/v3"'
            | wc -l
          register: https_35357_v3
          changed_when: False
        - name: Update 5000/v2.0 endpoints in Keystone database
          shell: >
            mysql keystone
            -e "update endpoint set url='https://{{ server_fqdn }}:5000/v2.0'
            where
            url='http://{{hostvars[inventory_hostname]['ansible_default_ipv4']['address']}}:5000/v2.0';"
          when: https_5000_v20.stdout != '0'
        - name: Update 35357/v2.0 endpoints in Keystone database
          shell: >
            mysql keystone
            -e "update endpoint set
            url='https://{{ server_fqdn }}:35357/v2.0' where
            url='http://{{hostvars[inventory_hostname]['ansible_default_ipv4']['address']}}:35357/v2.0';"
          when: https_35357_v20.stdout != '0'
        - name: Update 5000/v3 endpoints in Keystone database
          shell: >
            mysql keystone
            -e "update endpoint set url='https://{{ server_fqdn }}:5000/v3' where
            url='http://{{hostvars[inventory_hostname]['ansible_default_ipv4']['address']}}:5000/v3';"
          when: https_5000_v3.stdout != '0'
        - name: Update 35357/v3 endpoints in Keystone database
          shell: >
            mysql keystone
            -e "update endpoint set
            url='https://{{ server_fqdn }}:35357/v3' where
            url='http://{{hostvars[inventory_hostname]['ansible_default_ipv4']['address']}}:35357/v3';"
          when: https_35357_v3.stdout != '0'

    - name: Update Keystone endpoint in admin user client conf
      lineinfile:
        dest: /root/keystonerc_admin
        regexp: '^\s*export OS_AUTH_URL'
        line: 'export OS_AUTH_URL="https://{{ server_fqdn }}:5000/v3"'
        backup: yes

    - name: Copy client configurations to non-root user
      copy:
        remote_src: yes
        src: /root/keystonerc_admin
        dest: "/home/{{ ansible_user }}/"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0640'
        force: no

    - name: Update RPROMPT instead of PS1 for admin user client conf
      block:
        - name: Remove PS1
          lineinfile:
            path: ~/keystonerc_admin
            regexp: '^\s*export PS1'
            state: absent
        - name: Add RPROMPT
          lineinfile:
            path: ~/keystonerc_admin
            regexp: '^\s*export RPROMPT'
            line: 'export RPROMPT=keystone_admin'
      become: no

    - name: Download the keystonerc_admin conf
      fetch:
        src: /home/{{ ansible_user }}/keystonerc_admin
        dest: keystonerc_admin-{{ server_fqdn }}
        flat: yes

    - name: Retrieve the password from keystonerc_admin
      command: awk '{FS="="} /OS_PASSWORD/ {print $2}' ~/keystonerc_admin
      register: openstack_admin_pass
      become: no
      changed_when: False

    - name: Create {{ lookup('env', 'HOME') }}/.config/openstack/clouds.yaml
      block:
        - name: Create directories
          file:
            path: "{{ lookup('env', 'HOME') }}/.config/openstack"
            state: directory
            mode: 0750
        - name: Create clouds.yaml
          template:
            src: templates/clouds.yaml.j2
            dest: "{{ lookup('env', 'HOME') }}/.config/openstack/clouds.yaml"
            backup: true
      delegate_to: localhost
      become: no

  handlers:
    - name: restart apache
      service:
        name: httpd
        state: restarted

    - name: restart nova-compute
      service:
        name: openstack-nova-compute
        state: restarted

    - name: restart glance-api
      service:
        name: openstack-glance-api
        state: restarted

    - name: restart glance-registry
      service:
        name: openstack-glance-registry
        state: restarted

    - name: restart neutron
      service:
        name: neutron-server
        state: restarted

    - name: install updates
      package:
        name: '*'
        state: latest
        update_cache: yes
      tags:
        - skip_ansible_lint
